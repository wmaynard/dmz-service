@inherits TowerPortal.Views.Shared.PortalView
@using Rumble.Platform.Common.Models.Config
@{
    ViewData["Title"] = "Dynamic Config";
}

<h2>@ViewData["Title"]</h2>

<div class="error-container">
    @if ((string) TempData["UpdateSuccess"] == "Successfully updated dynamic config settings.")
    {
        <h4 style="color: darkgreen">@TempData["UpdateSuccess"]</h4>
    } else if ((string) TempData["UpdateSuccess"] != "Failed to update dynamic config settings.")
    {
        <h4 style="color: red">@TempData["UpdateSuccess"]</h4>
    }
    @if (TempData["Failure"] != null)
    {
        <h4 style="color: red">@TempData["Success"]</h4>
    }
    else
    {
        <h4 style="color: darkgreen">@TempData["Success"]</h4>
    }
</div>

@if (TempData["VisibleOverlay"] != null)
{
    <div class="overlay">
        @if (TempData["VisibleSection"] != null)
        {
            <div class="new-section-container">
                <h1>New Section</h1>
                <form class="section-info" method="post" asp-controller="DynamicConfig" asp-action="NewSection">
                    <label for="sectionName" class="section-name">Name</label>
                    <input id="sectionName" class="section-name" type="text" name="name" placeholder="Name">
                    <label for="sectionFriendlyName" class="section-friendly-name">Friendly Name</label>
                    <input id="sectionFriendlyName" class="section-friendly-name" type="text" name="friendlyName" placeholder="friendly-name">
                    
                    <button class="section-confirm" disabled="@(!Permissions.Config.Edit)" type="submit">Confirm</button>
                    @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
                </form>
            </div>
        }
        @if (TempData["VisibleVariable"] != null)
        {
            <div class="new-variable-container">
                <h1>New Section</h1>
                <form class="variable-info" method="post" asp-controller="DynamicConfig" asp-action="NewVariable">
                    <input id="variableName" class="invisible" name="name" value="@TempData["VariableSection"]"/>
                    <label for="variableKey" class="variable-key">Key</label>
                    <input id="variableKey" class="variable-key" type="text" name="key" placeholder="Key"/>
                    <label for="variableValue" class="variable-value">Value</label>
                    <textarea id="variableValue" class="variable-value" name="value" placeholder="Value" rows="10"></textarea>

                    <button class="section-confirm" disabled="@(!Permissions.Config.Edit)" type="submit">Confirm</button>
                    @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
                </form>
            </div>
        }
        @if (TempData["VisibleDelete"] != null)
        {
            <div class="delete-variable-container">
                <h1>Delete Key</h1>
                <p>Are you sure you would like to delete this key?</p>
                <form class="delete-form" method="post" asp-controller="DynamicConfig" asp-action="Delete">
                    <p>Section: @(TempData["VariableSection"])</p>
                    <p>Key: @(TempData["VariableKey"])</p>
                    <input for="name" class="invisible" name="name" value="@TempData["VariableSection"]">
                    <input for="key" class="invisible" name="key" value="@TempData["VariableKey"]">
                    <input for="value" class="invisible" name="value" value="@TempData["VariableValue"]">
                    <button class="delete-confirm" disabled="@(!Permissions.Config.Edit)" type="submit">Confirm</button>
                </form>
                @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
            </div>
        }
    </div>
}

<div class="settings-container">
    <div class="list-container">
        <h5 class="list-label">dynamic-config</h5>
        @foreach (Section item in (Section[]) @ViewData["Data"])
        {
            <a class="list-link" href=@($"#{item.FriendlyName}")>@item.FriendlyName</a>
        }
        @if (Permissions.Config.Edit)
        {
            @Html.ActionLink(linkText: "New Section", actionName: "ShowNewSectionOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
        }
        else
        {
            <p class="disabled-link">New Section</p>
        }
    </div>
    <div class="section-container">
        @foreach (Section item in (Section[]) @ViewData["Data"])
        {
            <div class="config-section" id=@($"{item.FriendlyName}")>
                <h4>@($"{item.FriendlyName}")</h4>
                @foreach (string key in item.Data.Keys)
                {
                    <div class="config-subsection">
                        <form class="edit-config-form" method="post" asp-controller="DynamicConfig" asp-action="Edit">
                            <input class="invisible" name="name" value="@item.Name"/>
                            <div class="edit-config-fields">
                                <input class="invisible" name="key" value="@key"/>
                                <div class="config-item">
                                    <label class="config-key">@key</label>
                                    <input class="config-value" name="value" value="@item.Data[($"{key}")].Value" disabled="@(!Permissions.Config.Edit)"/>
                                    <button class="variable-save-button" disabled="@(!Permissions.Config.Edit)" type="submit">Save</button>
                                    @if (Permissions.Config.Edit)
                                    {
                                        @Html.ActionLink(linkText: "X", actionName: "ShowDeleteOverlay", controllerName: "DynamicConfig", routeValues: new
                                        {
                                            name = @item.Name,
                                            key = @key,
                                            value = @item.Data[($"{key}")].Value
                                        }, htmlAttributes: new
                                        {
                                            name = @item.Name,
                                            key = @key,
                                            value = @item.Data[($"{key}")].Value
                                        })
                                    }
                                    else
                                    {
                                        <p>X</p>
                                    }
                                </div>
                            </div>
                        </form>
                    </div>
                }
                @if (Permissions.Config.Edit)
                {
                    @Html.ActionLink(linkText: "New Variable", actionName: "ShowNewVariableOverlay", controllerName: "DynamicConfig", routeValues: new
                    {
                        name = @item.Name
                    }, htmlAttributes: new
                    {
                        name = @item.Name
                    })
                }
                else
                {
                    <p class="disabled-link">New Variable</p>
                }
            </div>
        }
    </div>
</div>
@using TowerPortal.Extensions
@{
    ViewData["Title"] = "Dynamic Config";
}

<script type="text/javascript">
    $(document).ready(function() {
        $('button[class="new-section-button"]').click(function () {
            
        })
    })
    
    $(document).ready(function() {
        $('button[class="new-variable-button"]').click(function () {
            
        })
    })
</script>

<h2>@ViewData["Title"]</h2>

<div class="error-container">
    @if ((string) TempData["UpdateSuccess"] == "Successfully updated dynamic config settings.")
    {
        <h4 style="color: darkgreen">@TempData["UpdateSuccess"]</h4>
    } else if ((string) TempData["UpdateSuccess"] != "Failed to update dynamic config settings.")
    {
        <h4 style="color: red">@TempData["UpdateSuccess"]</h4>
    }
    @if (TempData["Failure"] != null)
    {
        <h4 style="color: red">@TempData["Success"]</h4>
    }
    else
    {
        <h4 style="color: darkgreen">@TempData["Success"]</h4>
    }
</div>

@if (TempData["VisibleOverlay"] != null)
{
    <div class="overlay">
        @if (TempData["VisibleSection"] != null)
        {
            <div class="new-section-container">
                <h1>New Section</h1>
                <form class="section-info" method="post" asp-controller="DynamicConfig" asp-action="NewSection">
                    <label for="sectionName">Name</label>
                    <input id="sectionName" type="text" name="name" placeholder="Name">
                    <label for="sectionFriendlyName">Friendly Name</label>
                    <input id="sectionFriendlyName" type="text" name="friendlyName" placeholder="friendly-name">
                    
                    <button class="section-confirm" disabled="@(!ViewData.GetPermissions().EditConfig)" type="submit">Confirm</button>
                    @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
                </form>
            </div>
        }
        @if (TempData["VisibleVariable"] != null)
        {
            <div class="new-variable-container">
                <h1>New Section</h1>
                <form class="variable-info" method="post" asp-controller="DynamicConfig" asp-action="NewVariable">
                    <input id="variableName" class="invisible" name="name" value="@TempData["VariableSection"]"/>
                    <label for="variableKey">Key</label>
                    <input id="variableKey" type="text" name="key" placeholder="Key">
                    <label for="variableValue">Value</label>
                    <input id="variableValue" type="text" name="value" placeholder="Value">

                    <button class="section-confirm" disabled="@(!ViewData.GetPermissions().EditConfig)" type="submit">Confirm</button>
                    @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
                </form>
            </div>
        }
        @if (TempData["VisibleDelete"] != null)
        {
            <div class="delete-container">
                <h1>Delete Key-value</h1>
                <p>Are you sure you would like to delete this key-value pair?</p>
                <form class="delete-form" method="post" asp-controller="DynamicConfig" asp-action="Delete">
                    <p>Section: @(TempData["VariableSection"])</p>
                    <p>Key: @(TempData["VariableKey"])</p>
                    <p>Value: @(TempData["VariableValue"])</p>
                    <input for="name" class="invisible" name="name" value="@TempData["VariableSection"]">
                    <input for="key" class="invisible" name="key" value="@TempData["VariableKey"]">
                    <input for="value" class="invisible" name="value" value="@TempData["VariableValue"]">
                    <button class="delete-confirm" disabled="@(!ViewData.GetPermissions().EditConfig)" type="submit">Confirm</button>
                </form>
                @Html.ActionLink(linkText: "Cancel", actionName: "HideOverlay", controllerName: "DynamicConfig", routeValues: new {}, htmlAttributes: new {})
            </div>
        }
    </div>
}

<div class="settings-container">
    <div class="list-container">
        <h5 class="list-label">dynamic-config</h5>
        @foreach (List<string> item in (List<List<string>>) @ViewData["Data"])
        {
            <a class="list-link" href=@($"#{item[0]}")>@item[0]</a>
        }
        @Html.ActionLink(linkText: "New Section", actionName: "ShowNewSectionOverlay", controllerName: "DynamicConfig", routeValues: new { }, htmlAttributes: new { })
    </div>
    <div class="section-container">
        @foreach (List<string> item in (List<List<string>>) @ViewData["Data"])
        {
            <div class="config-section">
                <h4 id=@($"{item[0]}")>@($"{item[0]}")</h4>
                <div class="config-subsection">
                    <form class="edit-config-form" method="post" asp-controller="DynamicConfig" asp-action="Edit">
                        <input class="invisible" name="name" value="@item[0]"/>
                        <div class="edit-config-fields">
                            <input class="invisible" name="key" value="@item[1]"/>
                            <div class="config-item">
                                <label class="config-key">@item[1]</label>
                                <input class="config-value" name="value" value="@item[2]"/>
                                @Html.ActionLink(linkText: "X", actionName: "ShowDeleteOverlay", controllerName: "DynamicConfig", routeValues: new
                                {
                                    name = @item[0],
                                    key = @item[1],
                                    value = @item[2]
                                }, htmlAttributes: new
                                {
                                    name = @item[0],
                                    key = @item[1],
                                    value = @item[2]
                                })
                            </div>
                            @Html.ActionLink(linkText: "New Variable", actionName: "ShowNewVariableOverlay", controllerName: "DynamicConfig", routeValues: new
                            {
                                name = @item[0]
                            }, htmlAttributes: new
                            {
                                name = @item[0]
                            })
                        </div>
                        <div class="edit-config-submit">
                            <button class="variable-save-button" disabled="@(!ViewData.GetPermissions().EditConfig)" type="submit">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        }
    </div>
</div>
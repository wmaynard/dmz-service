@inherits TowerPortal.Views.Shared.PortalView
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TowerPortal.Models.Permissions

@{ Require(Permissions.Portal.ManagePermissions); }
@{
    ViewData["Title"] = "User Permissions";
}
<h2>@ViewData["Title"]</h2>

<h4>Account: @ViewData["Account"]</h4>

<div class="error-container">
    @if (TempData["Failure"] != null)
    {
        <h4 style="color: red">@TempData["Success"]</h4>
    }
    else
    {
        <h4 style="color: darkgreen">@TempData["Success"]</h4>
    }
</div>

<form class="permission-info" method="post" asp-controller="Permission" asp-action="UpdatePermissions" onsubmit="jsonPost(event, this)">
    <input class="invisible" value=@TempData["AccountId"] name="id"/>
    <table class="permissions-table">
        <tr class="env-label">
            <td>Environment</td>
            <td>@ViewData["Environment"]</td>
        </tr>
        <!-- Dynamically populate the permission groups, ordered in ascending order by their names. -->
        @foreach (PermissionGroup group in Permissions.OrderBy(group => group.Name))
        {
            <tr class="permissions-label">
                <td><h3>@(group.Name)</h3></td>
                <td></td>
            </tr>
            foreach (KeyValuePair<string, bool> pair in group.Values.OrderBy(kvp => kvp.Key))
            {
                <tr class="permissions-label">
                    <td>@pair.Key</td>
                    <td>
                        <input type="checkbox" checked="@(pair.Value)" disabled="@(!Permissions.Portal.SuperUser || !Permissions.Portal.ManagePermissions)" name="@(pair.Key)"/>
                    </td>
                </tr>
            }
            
        }
    </table>
    <button type="submit">Save</button>
</form>

<script type="text/javascript">
    // This function grabs every variable from the form and dumps them into a JSON object.  This object is then POSTed back to the controller.
    // This differs from standard ASP form behavior in that we don't need parameters in the method to read the data, we can instead reference the Body
    // property of the controller as we would in any other Platform service (or use Optional<T>() / Require<T>()).
    // It's not quite ideal in the sense that this adds one more place where we have to track the URL, but given that this page will eventually be sending
    // dozens if not hundreds of values, we need some way to compress the data.  Also, when it comes to parsing the data on the C# side, GenericData is a powerful
    // tool.
    function jsonPost(event, form) {
        event.preventDefault();
        
        let data = {};
        Array.from(form.getElementsByTagName("input")).forEach(function (input) {
            data[input.name] = input.type === "checkbox" 
                ? input.checked 
                : input.value;
            });
        $.post("/portal/permission/account", data)
        .done(function(a, b, c){
            window.onbeforeunload = function() {
                window.scrollTo(0, 0);
            };
			console.log(a, b,  c);
            // location.reload();
        }).fail(function() {
            location.href = "/portal/error";
        });
    }
</script>